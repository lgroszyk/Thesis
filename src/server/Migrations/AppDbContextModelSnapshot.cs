// <auto-generated />
using System;
using LGroszyk.AntiqueBookShop.Core.DataAccess.Public;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LGroszyk.AntiqueBookShop.Migrations
{
    // Migracja bazy danych wygenerowana automatycznie przez narzędzia .NET Core CLI
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NickName")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<string>("DescriptionPl")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<bool>("HadEverOrder");

                    b.Property<string>("ISBN")
                        .HasMaxLength(32);

                    b.Property<bool>("IsElectronic");

                    b.Property<int?>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseByStoreDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<int>("BookId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BooksAuthors");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<int>("CategoryId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BooksCategories");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<int>("LanguageId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LanguageId");

                    b.ToTable("BooksLanguages");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<bool>("IsMainPhoto");

                    b.Property<int>("PhotoId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PhotoId");

                    b.ToTable("BooksPhotos");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NamePl")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutRulesEn")
                        .IsRequired()
                        .HasMaxLength(10000);

                    b.Property<string>("AboutRulesPl")
                        .IsRequired()
                        .HasMaxLength(10000);

                    b.Property<string>("AboutUs")
                        .IsRequired()
                        .HasMaxLength(1000000);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(10000);

                    b.Property<string>("ComplaintsEn")
                        .IsRequired()
                        .HasMaxLength(10000);

                    b.Property<string>("ComplaintsPl")
                        .IsRequired()
                        .HasMaxLength(10000);

                    b.Property<string>("PrivacyPolicyEn")
                        .IsRequired()
                        .HasMaxLength(1000000);

                    b.Property<string>("PrivacyPolicyPl")
                        .IsRequired()
                        .HasMaxLength(1000000);

                    b.Property<string>("RulesEn")
                        .IsRequired()
                        .HasMaxLength(1000000);

                    b.Property<string>("RulesPl")
                        .IsRequired()
                        .HasMaxLength(1000000);

                    b.Property<string>("Timetable")
                        .IsRequired()
                        .HasMaxLength(10000);

                    b.HasKey("Id");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("ShareTime");

                    b.Property<DateTime>("UploadDate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NamePl")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.NewsPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMainPhoto");

                    b.Property<int>("NewsId");

                    b.Property<int>("PhotoId");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("PhotoId");

                    b.ToTable("NewsPhotos");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("FileId");

                    b.Property<bool>("IsEbook");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<int?>("OfferResponseId");

                    b.Property<int>("OfferStatusId");

                    b.Property<string>("PrintingTime")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.Property<decimal>("TransactionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId");

                    b.Property<string>("WritingTime")
                        .IsRequired()
                        .HasMaxLength(8192);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("OfferResponseId");

                    b.HasIndex("OfferStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.OfferResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfferResponseStatusId");

                    b.Property<decimal?>("ProposedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("date");

                    b.Property<string>("ResponseText")
                        .HasMaxLength(8192);

                    b.HasKey("Id");

                    b.HasIndex("OfferResponseStatusId");

                    b.ToTable("OfferResponses");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.OfferResponseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NamePl")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("OfferResponseStatuses");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.OfferStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NamePl")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("OfferStatuses");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("OrderStatusId");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NamePl")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Book", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Order", "Order")
                        .WithMany("Books")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookAuthor", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Book", "Book")
                        .WithMany("BooksAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookCategory", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Book", "Book")
                        .WithMany("BooksCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Category", "Category")
                        .WithMany("BooksCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookLanguage", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Book", "Book")
                        .WithMany("BooksLanguages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Language", "Language")
                        .WithMany("BooksLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.BookPhoto", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Book", "Book")
                        .WithMany("BooksPhotos")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Photo", "Photo")
                        .WithMany("BooksPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.File", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.NewsPhoto", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.News", "News")
                        .WithMany("NewsPhotos")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Photo", "Photo")
                        .WithMany("NewsPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Offer", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.OfferResponse", "OfferResponse")
                        .WithMany()
                        .HasForeignKey("OfferResponseId");

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.OfferStatus", "OfferStatus")
                        .WithMany("Offers")
                        .HasForeignKey("OfferStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.OfferResponse", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.OfferResponseStatus", "OfferResponseStatus")
                        .WithMany("OfferResponses")
                        .HasForeignKey("OfferResponseStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Order", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.Token", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LGroszyk.AntiqueBookShop.Core.Models.Public.UserRole", b =>
                {
                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LGroszyk.AntiqueBookShop.Core.Models.Public.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
